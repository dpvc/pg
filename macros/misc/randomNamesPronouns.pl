
=head1 NAME

randomNamesPronouns.pl - Load macros for random names.

=head2 SYNOPSIS

    loadMacros('randomNamesPronouns.pl');

=head2 DESCRIPTION

C<randomNamesPronouns.pl> provides a randomName function that generates a random
name with subject, possessive, adjectives and object pronouns
with and without capitilization and verb conjugation.

Note: This idea and the names were taken from the C<PCCmacros.pl> C<RandomName>
subroutine to extend to the handling of pronouns. The first names were generated by randomly
selecting 200 names from the United States Social Security Administration's top
1000 list (actually 1000 per gender) from 2005.
The additional names associated with they pronouns were taken from a L<wikipedia list
of public trans people|https://en.wikipedia.org/wiki/List_of_transgender_people>
who use they pronouns. The last names were generated from a list of top 100 names
in the United States in 2020.

=head2 USAGE

First load the C<randomNamesPronouns> macro with

    loadMacros('randomNamesPronouns.pl');

and then call the randomPerson subroutine

    $p1 = randomPerson();

The variable C<$p1> is now a C<Person> object with methods to access the names, pronouns
and verb conjugation.  It is can be used within a problem as

    BEGIN_PGML
    [$p1->name] travels 1.5 miles to school.
    After school, [$p1->subject] [$p1->gogoes] to work.
    [$p1->Possessive] dog greets [$p1->object] when [$p1->subject] [$p1->verb('get')] home.
    The books on the table are [$p1->possession].
    END_PGML

Additionally, you can specify names/pronouns if you like.  For example

    $p1 = randomPerson(names => [['Bart' => 'he'], ['Lisa' => 'she']]);

or without the pronouns which will be assigned randomly beteween he/she/they:

    $p2 = randomPerson(names => ['Bart', 'Lisa']);

And if you would like multiple people to be randomly choosen with unique names, then

    @persons = randomPerson(n => 4);

generates an array of 4 C<Person> objects.

=cut

loadMacros('PGbasicmacros.pl', 'PGauxiliaryFunctions.pl');

@namespronouns = (
	[ Adeline    => 'she' ],
	[ Aiden      => 'they' ],
	[ Alan       => 'he' ],
	[ Alana      => 'she' ],
	[ Alayna     => 'she' ],
	[ Alec       => 'they' ],
	[ Alessandro => 'he' ],
	[ Alex       => 'he' ],
	[ Alexa      => 'she' ],
	[ Alexia     => 'she' ],
	[ Alia       => 'she' ],
	[ Allison    => 'she' ],
	[ Allyson    => 'she' ],
	[ Alyson     => 'she' ],
	[ Alyssa     => 'she' ],
	[ Amelia     => 'she' ],
	[ Amira      => 'she' ],
	[ Amiyah     => 'she' ],
	[ Annika     => 'she' ],
	[ Aracely    => 'she' ],
	[ Arnav      => 'he' ],
	[ Arturo     => 'he' ],
	[ Aryana     => 'she' ],
	[ Ashanti    => 'she' ],
	[ Autumn     => 'she' ],
	[ Averie     => 'she' ],
	[ Bradley    => 'he' ],
	[ Brendan    => 'he' ],
	[ Broderick  => 'he' ],
	[ Caleb      => 'he' ],
	[ Cameron    => 'he' ],
	[ Camilla    => 'she' ],
	[ Candice    => 'they' ],
	[ Carissa    => 'she' ],
	[ Cecelia    => 'she' ],
	[ Chad       => 'he' ],
	[ Chaim      => 'he' ],
	[ Charlie    => 'she' ],
	[ Clayton    => 'he' ],
	[ Clinton    => 'he' ],
	[ Cohen      => 'he' ],
	[ Colin      => 'he' ],
	[ Colt       => 'he' ],
	[ Conor      => 'he' ],
	[ Cruz       => 'he' ],
	[ Dakota     => 'she' ],
	[ Dana       => 'she' ],
	[ Dane       => 'he' ],
	[ Dangelo    => 'he' ],
	[ Danica     => 'she' ],
	[ Darion     => 'he' ],
	[ Darrius    => 'he' ],
	[ Dayanara   => 'she' ],
	[ Deborah    => 'she' ],
	[ Delilah    => 'she' ],
	[ Don        => 'they' ],
	[ Donald     => 'he' ],
	[ Donavan    => 'he' ],
	[ Dorian     => 'they' ],
	[ Draven     => 'he' ],
	[ Duncan     => 'he' ],
	[ Dylan      => 'they' ],
	[ Edgar      => 'he' ],
	[ El         => 'they' ],
	[ Elaine     => 'she' ],
	[ Elias      => 'he' ],
	[ Eliot      => 'they' ],
	[ Elliott    => 'he' ],
	[ Elsie      => 'she' ],
	[ Emanuel    => 'he' ],
	[ Emilie     => 'she' ],
	[ Esteban    => 'he' ],
	[ Evelyn     => 'she' ],
	[ Everett    => 'he' ],
	[ Ezekiel    => 'he' ],
	[ Ezra       => 'they' ],
	[ Fabian     => 'he' ],
	[ Fabiola    => 'she' ],
	[ Fatima     => 'she' ],
	[ Felicity   => 'she' ],
	[ Finn       => 'they' ],
	[ Fox        => 'they' ],
	[ Frances    => 'she' ],
	[ Freddy     => 'he' ],
	[ Gabriel    => 'he' ],
	[ Garcia     => 'they' ],
	[ Garrison   => 'he' ],
	[ Geoffrey   => 'he' ],
	[ Gilberto   => 'he' ],
	[ Gonzalo    => 'he' ],
	[ Gregory    => 'he' ],
	[ Greyson    => 'they' ],
	[ Guillermo  => 'he' ],
	[ Hailey     => 'she' ],
	[ Harley     => 'he' ],
	[ Haven      => 'she' ],
	[ Heath      => 'he' ],
	[ Hugo       => 'he' ],
	[ Humberto   => 'he' ],
	[ Ignacio    => 'he' ],
	[ Indya      => 'they' ],
	[ Isiah      => 'he' ],
	[ Ismael     => 'he' ],
	[ Jadyn      => 'he' ],
	[ Jaidyn     => 'he' ],
	[ Jailyn     => 'she' ],
	[ Jamison    => 'he' ],
	[ Jayda      => 'she' ],
	[ Jayleen    => 'she' ],
	[ Jazlyn     => 'she' ],
	[ Jenifer    => 'she' ],
	[ Jenny      => 'she' ],
	[ Jessica    => 'she' ],
	[ Jolette    => 'she' ],
	[ Jonathan   => 'he' ],
	[ Josephine  => 'she' ],
	[ Josh       => 'he' ],
	[ Josiah     => 'he' ],
	[ Jovan      => 'he' ],
	[ Jovanni    => 'he' ],
	[ Julien     => 'he' ],
	[ Juliet     => 'she' ],
	[ Kaeden     => 'he' ],
	[ Kailey     => 'she' ],
	[ Kamden     => 'he' ],
	[ Kara       => 'she' ],
	[ Karley     => 'she' ],
	[ Katarina   => 'she' ],
	[ Katlyn     => 'she' ],
	[ Kaylen     => 'she' ],
	[ Kaylin     => 'she' ],
	[ Kelsey     => 'she' ],
	[ Kelvin     => 'he' ],
	[ Kiana      => 'she' ],
	[ Kiersten   => 'she' ],
	[ Lachlan    => 'they' ],
	[ Lamar      => 'he' ],
	[ Laney      => 'she' ],
	[ Lauren     => 'she' ],
	[ Layshia    => 'they' ],
	[ Leroy      => 'he' ],
	[ Lisa       => 'she' ],
	[ Lizette    => 'she' ],
	[ Lucian     => 'he' ],
	[ Mackenzie  => 'she' ],
	[ Makayla    => 'she' ],
	[ Makena     => 'she' ],
	[ Malik      => 'he' ],
	[ Mariana    => 'she' ],
	[ Marisol    => 'she' ],
	[ Marshall   => 'he' ],
	[ Marvin     => 'he' ],
	[ Mary       => 'she' ],
	[ Mateo      => 'he' ],
	[ Matteo     => 'he' ],
	[ Matty      => 'they' ],
	[ Max        => 'they' ],
	[ Mckenzie   => 'she' ],
	[ Meghan     => 'she' ],
	[ Melany     => 'she' ],
	[ Melvin     => 'he' ],
	[ Mercedes   => 'she' ],
	[ Messiah    => 'he' ],
	[ Miguel     => 'he' ],
	[ Mikaela    => 'she' ],
	[ Mohammad   => 'he' ],
	[ Molly      => 'she' ],
	[ Myla       => 'she' ],
	[ Nayeli     => 'she' ],
	[ Neil       => 'he' ],
	[ Orlando    => 'he' ],
	[ Pamela     => 'she' ],
	[ Paola      => 'she' ],
	[ Payton     => 'she' ],
	[ Phoenix    => 'he' ],
	[ Precious   => 'she' ],
	[ Prince     => 'he' ],
	[ Rae        => 'they' ],
	[ Ray        => 'they' ],
	[ Rebeca     => 'she' ],
	[ Reese      => 'she' ],
	[ Reginald   => 'he' ],
	[ Reina      => 'she' ],
	[ Renee      => 'she' ],
	[ Rhiannon   => 'she' ],
	[ Rhys       => 'he' ],
	[ Ricky      => 'he' ],
	[ Riley      => 'he' ],
	[ Rocky      => 'he' ],
	[ Rodney     => 'he' ],
	[ Rogelio    => 'he' ],
	[ Roland     => 'he' ],
	[ Rosemary   => 'she' ],
	[ Ryleigh    => 'she' ],
	[ Sammy      => 'he' ],
	[ Selah      => 'she' ],
	[ Serenity   => 'she' ],
	[ Seth       => 'he' ],
	[ Shannon    => 'she' ],
	[ Shayla     => 'she' ],
	[ Sincere    => 'he' ],
	[ Skye       => 'she' ],
	[ Taliyah    => 'she' ],
	[ Taniya     => 'she' ],
	[ Taryn      => 'she' ],
	[ Tommy      => 'they' ],
	[ Tony       => 'he' ],
	[ Trevon     => 'he' ],
	[ Trinity    => 'she' ],
	[ Triston    => 'he' ],
	[ Tucker     => 'he' ],
	[ Ty         => 'he' ],
	[ Tyler      => 'they' ],
	[ Tyrese     => 'he' ],
	[ Valentina  => 'she' ],
	[ Xzavier    => 'he' ],
	[ Yair       => 'he' ],
	[ Yuliana    => 'she' ],
	[ Zane       => 'he' ],
	[ Zoey       => 'she' ]
);

@lastnames = qw(
	Adams   Allen     Alvarez    Anderson Bailey  Baker    Bennet    Brooks
	Brown   Campbell  Carter     Castillo Chavez  Clark    Collins   Cook
	Cooper  Cox       Cruz       Davis    Diaz    Edwards  Evans     Flores
	Foster  Garcia    Gomez      Gonzales Gray    Green    Gutierrez Hall
	Harris  Hernandez Hill       Howard   Hughes  Jackson  James     Jimenez
	Johnson Jones     Kelly      Kim      King    Lee      Lewis     Long
	Lopez   Martin    Martinez   Mendoza  Miller  Mitchell Moore     Morales
	Morgan  Morris    Murphy     Myers    Nelson  Nguyen   Ortiz     Parker
	Patel   Perez     Peterson   Phillips Pina    Price    Ramirez   Ramos
	Reed    Reyes     Richardson Rivera   Roberts Robinson Rodriguez Rogers
	Ross    Ruiz      Sanchez    Sanders  Scott   Smith    Stewart   Sullivan
	Taylor  Thomas    Thompson   Torres   Turner  Walker   Ward      Watson
	White   Williams  Wilson     Wood     Wright  Young
);

=head2 randomPerson

Returns a person as a Person object from a list in the macro.

=head3 Examples and options

=over

=item * No arguments returns a single random person

Example

    randomPerson()

=item * C<S<< n => k >>> returns an array of k Person objects with unique names.

Example

    randomPerson(n=>5)

returns an array of 5 Person objects with unique names.

=item * C<S<< names => arrayref >>> returns either a single Person or array of Persons
from the given names

If the arrayref is in the form of C<S<< [['name1' => 'pronoun1'],['name2' => 'pronoun2'], ...] >>> then
a person selected randomly from the given list is returned.

Example:

    $a = randomPerson(names => [[ Bart => 'he' ], [ Lisa => 'she' ], [ Matty => 'they' ]]);

Alternatively, each person name/pronoun can be set as an hashref.
For example the above can be written:

    $a = randomPerson(names => [
        { name => 'Bart', pronoun => 'he' },
        { name => 'Lisa', pronoun => 'she' },
        { name => 'Matty', pronoun => 'they' }
    ]);

If the pronoun is missing using either arrayrefs or hashrefs, then a pronoun is determined randomly.
Each of the following are legal

    $p1 = randomPerson( names => ['Larry', 'Moe', 'Curly']);
    $p2 = randomPerson( names => ['Larry', [ Moe => 'he' ], 'Curly']);
    $p3 = randomPerson( names => [{ name => 'Larry'}, { name => 'Moe' }, { name => 'Curly' }]);
    $p4 = randomPerson( names => [{ name => 'Larry'}, { name => 'Moe', pronoun => 'he' }, { name => 'Curly' }]);

And the option C<n> can be used to return an array with that number of persons.

    @p = randomPerson(n => 2, names => [[ Bart => 'he' ], [ Lisa => 'she' ], [ Matty => 'they' ]]);

=back

=cut

sub randomPerson {
	my %options = (n => 1, @_);
	my @persons = ();

	# If the names are passed in.
	if ($options{names}) {
		for my $p (@{ $options{names} }) {
			if (ref $p eq 'ARRAY') {
				push(@persons, [ $p->[0], $p->[1] // list_random('he', 'she', 'they') ]);
			} elsif (ref $p eq 'HASH') {
				push(@persons, [ $p->{name}, $p->{pronoun} // list_random('he', 'she', 'they') ]);
			} else {
				push(@persons, [ $p, list_random('he', 'she', 'they') ]);
			}
		}
	} else {
		@persons = @namespronouns;
	}

	my @names = map { Person->new(name => $_->[0], pronoun => $_->[1]) } random_subset($options{n}, @persons);
	return wantarray ? @names : $names[0];
}

=head3 randomLastName

This returns a random last name based on popular last names in the United States.  Example

    $p = randomLastName();

Note it is just a string, and doesn't have the pronouns that the Person object does.

If an array is requested and a number is passed in the form C<S<< n => k >>> (which defaults to 1),
then an array of k unique last names is returned.

    @lastnames = randomLastName(n => 4);

generates 4 unique last names.

=cut

sub randomLastName {
	my %options = (n => 1, @_);
	my @names   = random_subset($options{n}, @lastnames);
	return wantarray ? @names : $names[0];
}

=head2 CONSTRUCTOR Person

This makes a Person object to handle name and pronouns of a Person.

Make a Person with

    Person->new(name => 'Roger', pronoun => 'he')

for example. This is used by the C<randomPerson> method which returns a blessed Person object
which can be used to write a problem with a random name with pronouns and verb conjugation.

=cut

package Person;

sub new {
	my ($class, %opts) = @_;
	die "The field 'pronoun' must be passed in." unless defined($opts{pronoun});

	my @v = grep { $opts{pronoun} eq $_ } qw/he she they/;
	die "The pronoun must be either 'he', 'she' or 'they'. You passed in $opts{pronoun}"
		if scalar(@v) != 1;
	die 'The field "name" must be passed in' unless defined($opts{name});
	my $self = {
		name    => $opts{name},
		pronoun => $opts{pronoun}
	};
	bless $self, $class;
	return $self;
}

=head2 name

This returns the name of the person.

    $p = new Person(name => 'Roger', pronoun => 'he');
    $p->name;

returns the name 'Roger'.

=cut

sub name {
	return shift->{name};
}

=head2 subject

This returns the subject pronoun as a lower case.

    $p->subject;

returns the pronoun. In this case 'he'.

=cut

sub subject {
	return shift->{pronoun};
}

=head2 Subject

This returns the subject pronoun as an upper case.

    $p->Subject;

returns the upper case pronoun. In this case 'He'.

=cut

sub Subject {
	return ucfirst(shift->{pronoun});
}

=head2 possessive

This returns the possessive adjective

    $p->possessive;

returns (his, her, their) for the pronouns (he/she/they)

=cut

sub possessive {
	my $p = shift->{pronoun};
	return $p eq 'he' ? 'his' : ($p eq 'she' ? 'her' : 'their');
}

=head2 Possessive

This returns the captilized possessive adjective

    $p->Possessive;

returns (His, Her, Their) for the pronouns (he/she/they)

=cut

sub Possessive {
	return ucfirst(shift->possessive);
}

=head2 possession

This returns the possessive pronoun

    $p->possession;

returns (his, hers, theirs) for the pronouns (he/she/they)

=cut

sub possession {
	my $p = shift->{pronoun};
	return $p eq 'he' ? 'his' : ($p eq 'she' ? 'hers' : 'theirs');
}

=head2 Possession

This returns the capitalized versions of possessive pronoun

    $p->Possession;

returns (His, Hers, Theirs) for the pronouns (he/she/they)

=cut

sub Possession {
	return ucfirst(shift->possession);
}

=head2 object

This returns the object pronoun

    $p->object;

returns (him, her, them) for the pronouns (he/she/they)

=cut

sub object {
	my $p = shift->{pronoun};
	return $p eq 'he' ? 'him' : ($p eq 'she' ? 'her' : 'them');
}

=head2 Object

This returns the captilized object pronoun

    $p->Object;

returns (Him, Her, Them) for the pronouns (he/she/they)

=cut

sub Object {
	return ucfirst(shift->object);
}

=head2 verb

Returns the correct conjugation of the verb. If only one argument is passed in, it should
be a regular verb in the third person plural conjugation (the "they" version). For example:

    $p1 = new Person(name => 'Roger', pronoun => 'he');
    $p1->verb('find');

returns 'finds'. All that happens is an 's' or an 'es' is appended, according to some
simple heuristics.

    $p2 = new Person(name => 'Max', pronoun => 'they');
    $p2->verb('find')

returns 'find'

If a second argument is passed, it should be the third person singular conjugation
of the same verb (the "he/she" version). For example:

    $p1 = new Person(name => 'Roger', pronoun => 'he');
    $p1->verb('fly', 'flies');

returns 'flies'

    $p2 = new Person(name => 'Max', pronoun 'they');
    $p2->verb('fly', 'flies');

returns 'fly'

=cut

sub verb {
	my ($self, $plur, $sing) = @_;
	if (defined($sing)) {
		return ($self->{pronoun} eq 'they' ? $plur : $sing);
	} elsif (substr($plur, -1) eq 's' || substr($plur, -2) eq 'ch' || substr($plur, -2) eq 'sh') {
		return ($self->{pronoun} eq 'they' ? $plur : $plur . 'es');
	} else {
		return ($self->{pronoun} eq 'they' ? $plur : $plur . 's');
	}
}

=head3 C<dodoes>

Returns the correct conjugation of to do

=cut

sub dodoes {
	return shift->verb('do', 'does');
}

=head3 C<areis>

Returns the correct conjugation of to be

=cut

sub areis {
	return shift->verb('are', 'is');
}

=head3 C<gogoes>

Returns the correct conjugation of to go

=cut

sub gogoes {
	return shift->verb('go', 'goes');
}

=head3 C<havehas>

Returns the correct conjugation of to have

=cut

sub havehas {
	return shift->verb('have', 'has');
}

1;
